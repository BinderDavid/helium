-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- !!! CLEAN UP THIS CODE !!!
--
-------------------------------------------------------------------------------

--The double declarations/type constructors are added, because we don't want extra errors for these.
SEM Module
  | Module  exports . namesInScope    = @scopeNoConflicts ++ map head @declDouble
                    . ambiguousNames  = @ambiguousConflicts
                    . modulesInScope  = (@moduleName : @fileName : @body.importedModules)
                    . tyconsInScope   = map fst @uniqueTypeConstructors ++ map head @duplicatedTypeConstructors
                    . ambiguousTyCons = @ambiguousTypeConstructors
                    . consInScope     = @valueConstructorsWithParents
                    . duplicatedCons  = @duplicatedValueConstructors
                    . ambiguousCons   = @ambiguousValueConstructors

SEM Module 
  | Module    loc . exportErrors = @exports.exportErrors
                    
ATTR MaybeExports Exports Export
    [ namesInScope    : Names
      ambiguousNames  : {[[Name]]}
      modulesInScope  : Names
      tyconsInScope   : Names
      ambiguousTyCons : {[[Name]]}
      consInScope     : {[(Name, Name)]}
      duplicatedCons  : {[[Name]]}
      ambiguousCons   : {[[Name]]}
    |
    | exportErrors USE { ++ } { [] } : {[Error]}
      exportList   USE { ++ } { [] } :{[(Name, String)]}
    ]                    
    
{

checkExport :: Entity -> Name -> [Name] -> [[Name]]-> [Error]
checkExport entity name inScope ambiguous = ambiguousOrUndefinedErrors entity name inScope ambiguous []


checkConstructorExport :: Entity -> (Name, Name) -> [(Name, Name)] -> [[Name]] -> [[Name]] -> [Error]
checkConstructorExport entity (constructor, parent) inScopePairs duplicated ambiguous =
    case lookup constructor inScopePairs of
        Just realparent  -> if parent == realparent then 
                                []
                            else
                                [ExportWrongParent entity constructor parent realparent [child | (child, par) <- inScopePairs, par == parent ]]
        Nothing          -> if constructor `elem` map head duplicated then
                                []
                            else
                                ambiguousOrUndefinedErrors entity constructor (map fst inScopePairs) ambiguous []
}


ATTR MaybeNames [ | | toList USE { ++ } { [] } : Names ]

SEM MaybeNames
    | Nothing lhs.toList = []
    | Just    lhs.toList = @names.self

-- If classes are added, this should be updated aswell
SEM Export
    | Variable    lhs . exportErrors =  checkExport ExportVariable @name.self @lhs.namesInScope @lhs.ambiguousNames
    | TypeOrClassComplete
                  lhs . exportErrors =  checkExport ExportTypeConstructorOrClass @name.self @lhs.tyconsInScope @lhs.ambiguousTyCons
    | TypeOrClass lhs . exportErrors =  checkExport ExportTypeConstructorOrClass @name.self
                                           @lhs.tyconsInScope @lhs.ambiguousTyCons
                                            ++
                                            concatMap
                                                (\name ->
                                                    checkConstructorExport ExportConstructor (name, @name.self) 
                                                        @lhs.consInScope @lhs.duplicatedCons @lhs.ambiguousCons
                                                )
                                                @names.toList
    | Module      lhs . exportErrors =  checkExport ExportModule @name.self
                                           @lhs.modulesInScope []    
-------------------------------------------
-- Collecting the imported modules

ATTR ImportDeclarations ImportDeclaration  [ | importedModules : Names | ]
ATTR Body                                  [ | | importedModules : Names ]  

SEM Body
  | Hole    lhs . importedModules = []
  | Body    importdeclarations . importedModules = []
    
SEM ImportDeclaration
  | Import   lhs . importedModules = @name.self : @lhs.importedModules
