-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
-- 
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- !!! CLEAN UP THIS CODE !!!
--
-------------------------------------------------------------------------------

SEM Module
  | Module  exports . namesInScop   = concat [ @body.declVarNames
                                              , concatMap (M.keys . typeEnvironment) @lhs.importEnvironments
                                              , map fst @derivedFunctions
                                              ]
                    . modulesInScope = (@moduleName : @fileName : @body.importedModules)
                    . tyconsInScope  = @allTypeConstructors
                    . consInScope    = @allValueConstructorsWithParents

SEM Module 
  | Module    loc . exportErrors = @exports.exportErrors
                    
ATTR MaybeExports Exports Export
    [ namesInScop   : Names
      modulesInScope : Names
      tyconsInScope  : Names
      consInScope    : {[(Name, Name)]}
    |
    | exportErrors USE { ++ } { [] } : {[Error]}
    ]                    
    
{

checkExport :: Entity -> Name -> [Name] -> [Error]
checkExport entity name inScope =
    makeUndefined entity
        (if name `elem` inScope then
            []
         else
            [name]
        )
        (nubBy equalName inScope)

checkConstructorExport :: Entity -> (Name, Name) -> [(Name, Name)] -> [Error]
checkConstructorExport entity name@(constructor, _) inScopePairs =
    makeUndefined entity
        (if name `elem` inScopePairs then
            []
         else
            [constructor]
        )
        (nubBy equalName (map fst inScopePairs))

equalName :: Name -> Name -> Bool       
equalName x y =
    getNameName x == getNameName y        
}


ATTR MaybeNames [ | | toList USE { ++ } { [] } : Names ]

SEM MaybeNames
    | Nothing lhs.toList = []
    | Just    lhs.toList = @names.self

-- If classes are added, this should be updated aswell
SEM Export
    | Variable    lhs . exportErrors =  checkExport ExportVariable @name.self
                                           @lhs.namesInScop
    | TypeOrClassComplete
                  lhs . exportErrors =  checkExport ExportTypeConstructorOrClass @name.self
                                           @lhs.tyconsInScope
    | TypeOrClass lhs . exportErrors =  checkExport ExportTypeConstructorOrClass @name.self
                                           @lhs.tyconsInScope
                                            ++
                                            concatMap
                                                (\name ->
                                                    checkConstructorExport ExportConstructor (name, @name.self)
                                                        @lhs.consInScope
                                                )
                                                @names.toList
    | Module      lhs . exportErrors =  checkExport ExportModule @name.self
                                           @lhs.modulesInScope    
-------------------------------------------
-- Collecting the imported modules

ATTR ImportDeclarations ImportDeclaration  [ | importedModules : Names | ]
ATTR Body                                  [ | | importedModules : Names ]  

SEM Body
  | Hole    lhs . importedModules = []
  | Body    importdeclarations . importedModules = []
    
SEM ImportDeclaration
  | Import   lhs . importedModules = @name.self : @lhs.importedModules
