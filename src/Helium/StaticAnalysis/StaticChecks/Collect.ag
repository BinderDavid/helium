-----------------------------------------------------------------------------
-- |The Helium Compiler : Static Analysis
--
-- Maintainer  :  bastiaan@cs.uu.nl
-- Stability   :  experimental
-- Portability :  unknown
--
-- Collect the following information:
--
--    1) type constructors from a data type
--    2) type synonyms
--    3) (value) constructors from a data type
--    4) fixity declarations
--
-- Distribute the collected environments
--    5) value constructors
--    6) type constructors
--    7) type synonyms

-- Collect the following information:
--    8) type classes and their declarations
-------------------------------------------------------------------------------

imports{
import Data.Maybe
}

SEM Module
  | Module   loc . moduleQual = maybe ["Main"] getQualified @name.name
             loc . collectEnvironment = setValueConstructors   (M.fromList @body.collectValueConstructors)
                                        . setTypeConstructors  (M.fromList @body.collectTypeConstructors)
                                        . setTypeSynonyms      (M.fromList @body.collectTypeSynonyms)
                                        . setOperatorTable     (M.fromList @body.operatorFixities)
                                        . addToTypeEnvironment  (insertClassMembers @body.collectClassMemberEnv (M.fromList @derivedFunctions))
                                        . setClassNameEnvironment @classNamesEnv
                                        . setClassEnvironment (insertInstances @body.classInstances
                                            (M.unionWith combineClassDecls @body.classEnv (classEnvironment $ combineImportEnvironmentList @importEnvironments)))
                                        . setInstanceEnvironment @body.instanceEnv
                                        . setClassMemberEnvironment @body.collectClassMemberEnv
                                        $emptyEnvironment
                                        -- the type environment will be added after type inferencing.
                 . derivedFunctions = []

{-
                 . derivedInstances = let f (n,i) = makeInstance "Show" i (show n)
                                      in unitFM "Show"
                                            ( []
                                            , map f @body.collectTypeConstructors
                                            )

-}                             
ATTR Body Declarations Declaration Constructors Constructor [ moduleQual : {[ String ]} | | ]
{
addQualifiedCollect :: [String] -> Name -> a -> [(Name, a)] -> [(Name, a)]
addQualifiedCollect qual name result collect =
    let qualname = addQualified qual name
        res1 = (name, result)
        res2 = (qualname, result)
    in res1 : res2 : collect
}

-------------------------------------------
-- 1) Collecting (data-)type constructors

ATTR Body Declarations Declaration [ | collectTypeConstructors : { [(Name,(Int, Name))] } | ]

SEM Module | Module   body . collectTypeConstructors = []

SEM Declaration
  | Data  loc . fullname = addQualified @lhs.moduleQual @simpletype.name
          lhs . collectTypeConstructors = addQualifiedCollect @lhs.moduleQual @simpletype.name (length @simpletype.typevariables, @fullname) @lhs.collectTypeConstructors
  | Type  loc . fullname = addQualified @lhs.moduleQual @simpletype.name
          lhs . collectTypeConstructors = addQualifiedCollect @lhs.moduleQual @simpletype.name (length @simpletype.typevariables, @fullname) @lhs.collectTypeConstructors

-------------------------------------------
-- 2) Collecting value constructors

ATTR Body Declarations Declaration Constructors Constructor [ | collectValueConstructors : {[(Name, (Name, TpScheme))]} | ]
ATTR Constructor Constructors [ parent : Name | | parameterTypes USE { ++ } { [] } : Tps ]

SEM Module | Module   body . collectValueConstructors = []
SEM Declaration
    | Newtype constructor.parent  = @simpletype.name
    | Data    constructors.parent = @simpletype.name

SEM Constructor
  | Constructor
       lhs . collectValueConstructors = addQualifiedCollect @lhs.moduleQual @constructor.self @res @lhs.collectValueConstructors
           . parameterTypes = @tps
       loc . typeScheme = generalizeAll ([] .=>. foldr (.->.) @tp @tps)
           . newsimpletype = convertSimpleTypeToQualified @lhs.typeConstructorsWithDefined @lhs.simpletype
           . newtypes = map (convertTypeToQualified @lhs.typeConstructorsWithDefined) @types.types
           . (tp,tps)   = convertFromSimpleTypeAndTypes @newsimpletype @newtypes
           . res        = (@lhs.parent, @typeScheme)
                  
  | Infix
       lhs . collectValueConstructors = addQualifiedCollect @lhs.moduleQual @constructorOperator.self @res @lhs.collectValueConstructors
           . parameterTypes = @tps
       loc . typeScheme = generalizeAll ([] .=>. foldr (.->.) @tp @tps)
           . newsimpletype = convertSimpleTypeToQualified @lhs.typeConstructorsWithDefined @lhs.simpletype
           . newtypes = map (convertTypeToQualified @lhs.typeConstructorsWithDefined) [@leftType.type,@rightType.type]
           . (tp,tps)   = convertFromSimpleTypeAndTypes @newsimpletype @newtypes
           . res        = (@lhs.parent, @typeScheme)

-------------------------------------------
-- 3) Collecting type synonyms

ATTR Body Declarations Declaration [ | collectTypeSynonyms : {[(Name,(Int,Tps -> Tp))]} | ]

SEM Module | Module   body . collectTypeSynonyms = []

--We only add the qualified name, since types will always be fully qualified before type checked.
SEM Declaration
  | Type   lhs . collectTypeSynonyms = (@qualname, @typeSynonymInfo) : @lhs.collectTypeSynonyms
           loc . typeSynonymInfo = (length @simpletype.typevariables,\tps -> makeTpFromType (zip @simpletype.typevariables tps) @newtype)
           loc . newtype  = convertTypeToQualified @lhs.typeConstructorsWithDefined @type.self
           loc . qualname = addQualified @lhs.moduleQual @simpletype.name
           
-------------------------------------------
-- 4) Collecting Fixity Declarations

ATTR Body Declarations Declaration MaybeDeclarations [ |  operatorFixities : {[(Name,(Int,Assoc))]} | ]

SEM Module | Module   body . operatorFixities = []


SEM MaybeDeclarations
    | Just
        lhs . operatorFixities = @declarations.operatorFixities

SEM Declaration
  | Fixity   lhs . operatorFixities = let associativity = case @fixity.self of
                                                             Fixity_Infix _  -> AssocNone
                                                             Fixity_Infixl _ -> AssocLeft
                                                             Fixity_Infixr _ -> AssocRight
                                          priority      = case @priority.self of
                                                             MaybeInt_Just i  -> i
                                                             MaybeInt_Nothing -> 9
                                      in [ (name, (priority, associativity)) | name <- @operators.self ] ++ @lhs.operatorFixities
    | Class lhs . operatorFixities = @where.operatorFixities

-------------------------------------------
-- 5) Distributing Value Constructors

SEM Module
  | Module   loc . (uniqueValueConstructors, ambiguousValueConstructorsWithValue) =
                      uniqueKeysWithValue (@declNoConflictsValCon ++ mergeSameOrigins (concatMap (M.assocs . valueConstructors) @importEnvironments) )
                 . (declNoConflictsValCon, duplicatedValueConstructors) = filterQualifiedDoubles $ uniqueKeys @body.collectValueConstructors
                 . allValueConstructors            = map fst @uniqueValueConstructors ++ map head @duplicatedValueConstructors ++ map head @ambiguousValueConstructors
                 . valueConstructorsWithParents = map (\(con, (par, _)) -> (con,par)) $ @uniqueValueConstructors
                 . ambiguousValueConstructors = map (map fst) @ambiguousValueConstructorsWithValue
                 . ambiguousValueConstructorsWithParents = map (map (\(con, (par, _)) -> (con,par))) $ @ambiguousValueConstructorsWithValue
                 . valueConstructors               = M.fromList $ map (\(con, (_, tpscheme)) -> (con,tpscheme)) $ @uniqueValueConstructors

ATTR Body Declarations Declaration Expressions Expression Patterns Pattern
     Statement Statements Qualifier Qualifiers
     Alternative Alternatives Constructor Constructors
     GuardedExpressions GuardedExpression FunctionBinding FunctionBindings
     LeftHandSide RightHandSide MaybeDeclarations MaybeExpression AnnotatedType AnnotatedTypes
     [ valueConstructors : {M.Map Name TpScheme} 
     allValueConstructors : Names
     ambiguousValueConstructors : {[[Name]]} | | ]

-------------------------------------------
-- 6) Distributing Type Constructors

SEM Module
  | Module loc . (uniqueTypeConstructors, ambiguousTypeConstructors) = 
                    uniqueKeys  ( @declNoConflictsTyCon ++ mergeSameOrigins (concatMap (M.assocs . typeConstructors) @importEnvironments) )
               . (declNoConflictsTyCon, duplicatedTypeConstructors) = 
                    filterQualifiedDoubles $ uniqueKeys ( @body.collectTypeConstructors)
               . allTypeConstructors = map fst @uniqueTypeConstructors ++ map head @duplicatedTypeConstructors ++ map head @ambiguousTypeConstructors
               . typeConstructors    = M.fromList @uniqueTypeConstructors
               . typeConstructorsWithDefined = @typeConstructors `M.union` M.fromList @declNoConflictsTyCon

ATTR Body Declarations Declaration Expressions Expression Patterns Pattern
     Statement Statements Qualifier Qualifiers
     Alternative Alternatives Constructor Constructors
     GuardedExpressions GuardedExpression FunctionBinding FunctionBindings
     LeftHandSide RightHandSide MaybeDeclarations MaybeExpression
     Type Types AnnotatedType AnnotatedTypes ContextItem ContextItems
     [ typeConstructors : { M.Map Name (Int, Name) }
     typeConstructorsWithDefined : { M.Map Name (Int, Name) }
     allTypeConstructors : Names
     ambiguousTypeConstructors : {[Names]} | | ]

-------------------------------------------
-- 7) Distributing Type Synonyms

ATTR Module -> Declaration [ orderedTypeSynonyms:OrderedTypeSynonyms | | ]

SEM Module
  | Module body . orderedTypeSynonyms =
                      let list     = mergeSameOrigins (concatMap (M.assocs . typeSynonyms) @importEnvironments) ++
                                     @body.collectTypeSynonyms
                          newmap   = M.fromList [ (show name, t) | (name, t) <- list ]
                          ordering = fst (getTypeSynonymOrdering newmap)
                      in (ordering, newmap)

--------------------------------
-- Derived instances (see also TypeInferenceCollect.ag)

ATTR Module -> Declaration [ classEnvironment:ClassEnvironment | | collectInstances USE { ++ } { [] } : {[(Name, Instance)]} ]

SEM Module
  | Module
       body.classEnvironment =
          let importEnv = foldr combineImportEnvironments emptyEnvironment @importEnvironments
          in foldr (\(n, i) -> insertInstance (show n) i)
                   (classEnvironment importEnv)
                   @body.collectInstances

SEM Declaration
  | Data
       lhs . collectInstances = [ (cl, makeInstance (show cl) (length @simpletype.typevariables) (show @simpletype.name) True)
                                | cl <- @derivings.self
                                ]


-------------------------------------------------------
-- utility attributes for types and constructors

ATTR SimpleType [ | | name:Name typevariables:Names ]

SEM SimpleType
  | SimpleType  lhs . name          = @name.self
                    . typevariables = @typevariables.self

ATTR Type Types AnnotatedTypes AnnotatedType Constructors Constructor [ | | typevariables USE { ++ } { [] } : Names ]

SEM Type
  | Variable  lhs . typevariables = [ @name.self ]

ATTR Constructors Constructor [ simpletype:SimpleType | | ]

SEM Declaration
  | Data     constructors . simpletype = @simpletype.self
  | Newtype  constructor  . simpletype = @simpletype.self

ATTR AnnotatedTypes [ | | types : Types ]
ATTR AnnotatedType  [ | | type  : Type  ]

SEM AnnotatedTypes
  | Cons   lhs . types = @hd.type : @tl.types
  | Nil    lhs . types = []

SEM AnnotatedType
  | AnnotatedType  lhs . type = @type.self

{

filterQualifiedDoubles :: ([(Name,a)],[[Name]]) -> ([(Name,a)],[[Name]]) 
filterQualifiedDoubles (orig, doubles) = (orig, filter (not . isQualified . head) doubles)

uniqueKeys :: Ord key => [(key,a)] -> ([(key,a)],[[key]])
uniqueKeys = let comp (x,_) (y,_) = compare x y
                 eq   (x,_) (y,_) = x == y
                 predicate xs = length xs == 1
             in (\(xs, ys) -> (map head xs, map (map fst) ys))
              . partition predicate
              . groupBy eq
              . sortBy comp

uniqueKeysWithValue :: Ord key => [(key,a)] -> ([(key,a)],[[(key,a)]])
uniqueKeysWithValue = let comp (x,_) (y,_) = compare x y
                          eq   (x,_) (y,_) = x == y
                          predicate xs = length xs == 1 
                      in (\(xs, ys) -> (map head xs, ys)) 
                       . partition predicate 
                       . groupBy eq 
                       . sortBy comp

mergeSameOrigins :: [(Name,a)] -> [(Name,a)]
mergeSameOrigins = map head
                   . groupBy eq 
                   . sortBy comp
    where
        comp (x,_) (y,_) = case compare x y of
            EQ -> compare (getNameOrigin x) (getNameOrigin y)
            cp -> cp
        eq   (x,_) (y,_) = x == y && (getNameOrigin x) == (getNameOrigin y)
}

-- Collecting the Classes
{


-- The following haskell code is used for building a temporary dictionairy in order to complete static checks
type ClassDef = (Name, ClassMembers)
type ClassMembers = (Names, [(Name, TpScheme, Bool, HasDefault)])
type ClassMembers' = [(Name, TpScheme, Bool, HasDefault)]

--In declarations we find both type signatures and function declarations
filterType :: Declarations -> (Declarations, Declarations) -> (Declarations, Declarations)
filterType (d@(Declaration_TypeSignature _ _ _):ds) (t, dec) = filterType ds (d:t, dec)
filterType (d:ds) (t, dec)                                   = filterType ds (t, d:dec)
filterType []     res                                        = res

--A type can be declared for multiple function names
createClassDef1 :: Declaration -> ClassMembers'
createClassDef1 (Declaration_TypeSignature _ names ty) = [(n, fst $ makeTpSchemeFromType' ty, False, False) | n <- names]
createClassDef1 _                                     = error "Error createClassDef1, filtering failed..."

--A function declaration should be associated with a type in the class definition
createClassDef2 :: Declarations -> ClassMembers' -> ClassMembers'
createClassDef2 (d:ds) m = createClassDef2 ds $ createClassDef2' (nameOfDeclaration d) d m
createClassDef2 []     m = m

createClassDef2' :: Eq t1 => [t1] -> t -> [(t1, TpScheme, Bool, HasDefault)] -> [(t1, TpScheme, Bool, HasDefault)]
createClassDef2' (n:ns) d m = createClassDef2' ns d $ createClassDef2'' n d m
createClassDef2' []     _ m = m


createClassDef2'' :: Eq t1 => t1 -> t -> [(t1, TpScheme, Bool, HasDefault)] -> [(t1, TpScheme, Bool, HasDefault)]
createClassDef2'' n d (m@(n2,t, _, def):ms) | n == n2   = (n2, t, True, def):ms
                                     | otherwise = m:(createClassDef2'' n d ms)
createClassDef2'' _ _ []                             = [] -- Should not happen but if it happens the error is reported by another check

createClassDef :: Name -> MaybeDeclarations -> Names -> ClassMemberEnvironment
createClassDef n MaybeDeclarations_Nothing names  = M.singleton n (names, [])
createClassDef n (MaybeDeclarations_Just decls) names = M.singleton n (names, createClassDef2 fdecl $ concatMap createClassDef1 types)
               where (types, fdecl) = filterType decls ([], [])

convertClassMemberEnvironmentTypes :: (TpScheme -> TpScheme) -> ClassMemberEnvironment -> ClassMemberEnvironment
convertClassMemberEnvironmentTypes f = fmap $ fmap $ fmap (\(a,b,c,d) -> (a,f b,c,d))

insertDefaults :: Name -> Names -> ClassMemberEnvironment -> ClassMemberEnvironment
insertDefaults name defs env = M.mapWithKey (\n membs -> if n == name then (update defs membs) else membs) env 
      where
          update :: Names -> (Names, [(Name, TpScheme, Bool, HasDefault)]) -> (Names, [(Name, TpScheme, Bool, HasDefault)])
          update defs (tvars, funcs) = (tvars, map (\(fname, tpscheme, b, _)->(fname, tpscheme, b, fname `elem` defs)) funcs)

insertInstances :: [(String, Tp, [(String, Tp)])] -> ClassEnvironment -> ClassEnvironment
insertInstances instances classEnv = foldr (\inst@(n, _, _) -> M.update (insert inst) n) classEnv instances
    where
        insert :: (String, Tp, [(String, Tp)]) -> Class -> Maybe Class
        insert (className, instType, preds) (cn, instances) = 
            let 
               curInstance = (Predicate className instType, [Predicate n v | (n, v) <- preds]) 
            in Just (cn, nub $ curInstance : instances)

insertClassMembers :: M.Map Name (Names, [(Name, TpScheme, Bool, HasDefault)]) -> M.Map Name TpScheme -> M.Map Name TpScheme
insertClassMembers classMemberEnv valueEnv = M.foldrWithKey insert valueEnv classMemberEnv
    where 
        insert :: Name -> (Names, [(Name, TpScheme, Bool, HasDefault)]) -> M.Map Name TpScheme -> M.Map Name TpScheme
        insert className (typeVars, funcs) env = foldr (insertFunc className typeVars)  env funcs
        insertFunc :: Name -> Names -> (Name, TpScheme, Bool, HasDefault) -> M.Map Name TpScheme -> M.Map Name TpScheme
        insertFunc className typeVars (name, tp, _, _) env = 
            let 
                typeIndices :: [(Int, String)]
                typeIndices = filter (\(_, s) -> s `elem` (map getNameName typeVars)) (getQuantorMap tp)
                typeVariablesMapped = map (\(n, s) -> (fromJust $ find (\tv -> getNameName tv == s) typeVars, TVar n)) typeIndices
                tpWContext = addContextToType className typeVariablesMapped tp
            in M.insert name tpWContext env
}

ATTR Declarations Declaration [ | | collectTypeClasses  USE { ++ } { [] } : { [(Name, [(Name, TpScheme)])] } ]
ATTR Body Declarations Declaration [ | | collectClassMemberEnv USE { `M.union` } { M.empty } : {ClassMemberEnvironment}
                                         collectClassNames USE { M.union } { M.empty } : { ClassNameEnvironment } ]

SEM Module
    | Module body . classMemberEnv = foldr exclusiveUnion @body.collectClassMemberEnv (map classMemberEnvironment @importEnvironments)
                  . classNamesEnv  = @classNamesEnv
             loc  . classNamesEnv  = foldr exclusiveUnion @body.collectClassNames (map classNameEnvironment @importEnvironments)

SEM Declaration
    | Class lhs . collectClassNames     = M.fromList [(@simpletype.name, @qualifiedName), (@qualifiedName, @qualifiedName)]
            lhs . collectTypeClasses    = [(@qualifiedName, @where.typeSignatures)]
            lhs . collectClassMemberEnv = insertDefaults @qualifiedName @where.functionDefaults @qualifiedClassDef
            loc . classDef              = createClassDef @qualifiedName @where.self @simpletype.typevariables
                . qualifiedClassDef     = convertClassMemberEnvironmentTypes (convertTpSchemeToQualified @lhs.typeConstructorsWithDefined) @classDef
                . qualifiedName         = addQualified @lhs.moduleQual @simpletype.name


SEM Declarations
    | Cons     lhs . collectTypeClasses = @hd.collectTypeClasses  ++ @tl.collectTypeClasses

-- Collect the type variables in the context
ATTR ContextItems ContextItem [ || typeVariables USE {++} {[]} : Types ]

SEM ContextItem
     | ContextItem lhs . typeVariables = @types.self

-------------------------------------------
-- Collecting Type Signatures

ATTR Declaration Declarations [ | typeSignatures:{[(Name,TpScheme)]} | ]
ATTR Body MaybeDeclarations   [ | | typeSignatures:{[(Name,TpScheme)]} ]
ATTR Declaration Declarations MaybeDeclarations [ | | functionDefaults USE {(++)} {[]} : {[Name]}]

SEM Body
  | Hole lhs . typeSignatures = []
  | Body    declarations . typeSignatures = []
SEM Expression        | Let     declarations . typeSignatures = []
SEM Statement         | Let     declarations . typeSignatures = []
SEM Qualifier         | Let     declarations . typeSignatures = []
SEM MaybeDeclarations | Just    declarations . typeSignatures = []
                      | Nothing lhs          . typeSignatures = []


SEM Declaration
  | TypeSignature
      lhs . typeSignatures = [ (name, @typeScheme) | name <- @names.self ] ++ @lhs.typeSignatures
      loc . (typeScheme, intMap) = makeTpSchemeFromType' $ convertTypeToQualified @lhs.typeConstructorsWithDefined @type.self
  | Class
      --lhs . typeSignatures = [] --@where.typeSignatures
  | Instance
      lhs . typeSignatures = @where.typeSignatures -- And we apply the same trick again
  | FunctionBindings
      lhs . functionDefaults = [@bindings.name]

-------
-- Building a Class Environment

ATTR Body [ importedClassEnv : {ClassEnvironment}| | ]

SEM Module
  | Module body . importedClassEnv = classEnvironment $ combineImportEnvironmentList @importEnvironments

ATTR Body Declaration Declarations [
    |
    |
        classEnv USE {`M.union`} {M.empty} : {ClassEnvironment}
        instanceEnv USE {`M.union`} {M.empty} : {InstanceEnvironment}
        classInstances USE {(++)} {[]} : {[(String, Tp, [(String, Tp)])]}
]

SEM Declaration
    | Class --TODO: Klopt dit? Zie git
        lhs . classEnv = M.singleton (getNameName $ convertClassNameToQualified @lhs.classNamesEnv $ @simpletype.name) 
                          ((map (getNameName . convertClassNameToQualified @lhs.classNamesEnv . fst) $ getSuperClasses @context.self), [])
    | Instance
       loc . qualifiedType  = convertTypeToQualified @qualifiedEnv $ head @types.self
       loc . qualifiedEnv   = @lhs.typeConstructorsWithDefined `M.union` (M.map ((,) 0) @lhs.classNamesEnv)
       loc . qualifiedTp    = makeTpFromType' @qualifiedType
       loc . qualifiedName  = convertClassNameToQualified @lhs.classNamesEnv @name.self
       loc . superClasses   = map (\(c, tps) -> (getNameName $convertClassNameToQualified @lhs.classNamesEnv c, tps)) 
                                                      $ getSuperClasses @context.self
       lhs . classInstances = let
                                superClasses :: [(String, Tp)]
                                superClasses = map (fmap $ unqualify . unquantify . head) @superClasses
                              in [(getNameName @qualifiedName, @qualifiedTp, superClasses)]

       lhs . instanceEnv = M.singleton (addQualified @lhs.moduleQual @name.self, @qualifiedTp) 
                            (namesInType @qualifiedType, map (fmap (show . head)) @superClasses)
    | Data  lhs . instanceEnv = M.fromList 
                                    [
                                        let className = dn
                                            dataName = @simpletype.name
                                            tvs = @simpletype.typevariables
                                            tVars = zip tvs (map TVar [0..])
                                            key = (dn, foldl TApp (TCon $ show dataName) $ map snd tVars)
                                            value = (tvs, [(show dn, tv) | tv <- map show tvs])
                                        in (key, value) | dn <- @derivings.self
                                    ]
            lhs . classInstances =  [
                                        let 
                                            tvs = @simpletype.typevariables
                                            tVars = zip tvs (map TVar [0..])
                                            typeClass = foldl TApp (TCon $ show @simpletype.name) $ map snd tVars
                                        in (show dn, typeClass, map (\x -> (show dn, snd x)) tVars)
                                        | dn <- @derivings.self
                                    ]
        
{

getTypeOfInstanceFunction :: Name -> Name -> ClassMemberEnvironment -> TpScheme
getTypeOfInstanceFunction instanceName name env = case M.lookup instanceName env of
        Just c ->   let (_, functions) = c
                        (_, tp, _, _) = fromMaybe (error "Unknown function in instance") (lookupFunc name functions)
                    in tp
        Nothing -> error "Unknown class in instance declaration"
    where
        lookupFunc :: Name -> [(Name, a, b, c)] -> Maybe (Name, a, b, c)
        lookupFunc _ [] = Nothing
        lookupFunc n (f@(nf, _, _, _):fs)  | n == nf   = Just f
                                        | otherwise = lookupFunc n fs

getSuperClasses ::  ContextItems -> [(Name, [TpScheme])]
getSuperClasses = map (\(ContextItem_ContextItem _ n vs) -> (n, map makeTpSchemeFromType vs))

getInstanceFunctionNames :: MaybeDeclarations -> [Name]
getInstanceFunctionNames (MaybeDeclarations_Nothing) = []
getInstanceFunctionNames (MaybeDeclarations_Just ds) = fmap (\d -> getDeclarationName d) ds

getDeclarationName :: Declaration -> Name
getDeclarationName (Declaration_FunctionBindings _ []) = error "No function bindings found" 
getDeclarationName (Declaration_FunctionBindings _ [fb]) = getFunctionBindingName fb
getDeclarationName (Declaration_FunctionBindings _ fb) =
        let names = map getFunctionBindingName fb 
            valid = all (==(head names)) names
        in if valid then head names else error "Inconsistent names in function bindings"

getDeclarationName _ = error $ "Unknown declaration in instance"

getFunctionBindingName :: FunctionBinding -> Name
getFunctionBindingName (FunctionBinding_FunctionBinding _ lhs _)= getLhsName lhs

getLhsName :: LeftHandSide -> Name
getLhsName (LeftHandSide_Function _ name _) = name
getLhsName (LeftHandSide_Infix _ _ name _) = name
}

ATTR Body Declaration Declarations [ | | instances USE {++} {[]} : {[(Range, Instance)]} ]

SEM Declaration
  | Instance
     lhs . instances = [createInstance @range.self @name.self (head @types.self) @context.self]
  | Data
    lhs. instances = [ (@range.self, makeInstance (show cl) (length @simpletype.typevariables) (show @simpletype.name) True)
                                | cl <- @derivings.self
                                ]
    

{

createInstance :: Range -> Name -> Type -> ContextItems -> (Range, Instance)
createInstance r n ty ctx = (r, (makePredicate n ty , map (\(ContextItem_ContextItem _ n2 tys) -> makePredicate n2 (head tys)) ctx))
   where nameMap = makeNameMap (namesInTypes $ ty : (map (\(ContextItem_ContextItem _ _ tys) -> head tys) ctx))
         makePredicate :: Name -> Type -> Predicate
         makePredicate nm typ = Predicate (getNameName nm) (makeTpFromType nameMap typ)

}


