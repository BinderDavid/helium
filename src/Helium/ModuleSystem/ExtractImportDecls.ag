ATTR Module [ | | coreImportDecls : { [ImportList] } ] 

INCLUDE "UHA_Syntax.ag"
INCLUDE "ToCoreName.ag"

imports{
import Helium.Syntax.UHA_Syntax
import Helium.Syntax.UHA_Utils
import Lvm.Common.Id
import Lvm.Common.IdSet
import qualified Lvm.Core.Expr as Core
import qualified Lvm.Core.Module as Core
import Helium.Utils.Utils (internalError)
}
{
type ImportList = ( Core.CoreDecl -- The import declaration
                    , Maybe Bool    -- Nothing if there is no import specification. Then True if hiding, false if not.
                    , IdSet         -- Values
                    , IdSet         -- Constructors, records fields or class methods
                    , IdSet         -- Complete types or classes
                    , IdSet         -- Only the type constructor or class name
                    , Name          -- The imported module name
                    )
}

  
ATTR Body ImportDeclarations ImportDeclaration
   [ | | coreImportDecls USE { ++ } { [] } : { [ImportList] } ] 
    
SEM ImportDeclaration
    | Import 
        lhs.coreImportDecls = [( @loc.importDecls
                               , @importspecification.importspec
                               , @importspecification.values
                               , @importspecification.confieldormethods
                               , @importspecification.typeorclassesCompl
                               , @importspecification.typeorclasses
                               , @name.self)]
        loc.importDecls =
            
          if @qualified || not @asname.isNothing then
              internalError "ExtractImportDecls.ag" "ImportDeclaration.Import" "qualified and as-imports not supported yet"
          else
              Core.DeclImport
                  { Core.declName = idFromName @name.self
                  , Core.declAccess =
                      Core.Imported
                          { Core.accessPublic   = False -- private
                          , Core.importModule   = idFromName @name.self
                          , Core.importName     = dummyId
                          , Core.importKind     = Core.DeclKindModule
                          , Core.importMajorVer = 0
                          , Core.importMinorVer = 0
                          }
                  , Core.declCustoms = []
                  }

ATTR MaybeImportSpecification ImportSpecification [ | | importspec : {Maybe Bool} ]

SEM MaybeImportSpecification
    | Nothing              lhs.importspec     = Nothing

SEM ImportSpecification
    | Import lhs.importspec = Just @hiding

ATTR MaybeImportSpecification ImportSpecification Imports Import [ | | values, typeorclasses, confieldormethods, typeorclassesCompl USE { `unionSet` } { emptySet } : IdSet ]

SEM Import
    | Variable                lhs.values             = singleSet (idFromName @name.self)
    | TypeOrClass             lhs.typeorclasses      = singleSet (idFromName @name.self)
                              lhs.confieldormethods  = setFromList $ maybe [] (map idFromName) @names.names
    | TypeOrClassComplete     lhs.typeorclassesCompl = singleSet (idFromName @name.self)
